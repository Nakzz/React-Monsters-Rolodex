{"version":3,"sources":["logo.svg","component/card/card.jsx","component/card-list/card-list-component.jsx","component/searchBox/searchBox-component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearchState","e","field","target","value","setState","searchField","state","_this2","fetch","then","response","json","users","console","log","_this$state","filteredMonsters","filter","toLowerCase","includes","searchBox_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NCI3BC,2BAAO,SAAAC,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BAEtBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQE,MACnBT,EAAAC,EAAAC,cAAA,aAAKH,EAAMQ,QAAQG,UCJVC,EAAW,SAAAZ,GAAK,OAE7BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEdJ,EAAMa,SAASC,IAAK,SAAAN,GAAO,OACxBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAQQ,IAAMR,QAASA,QCNzBS,SAAW,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACpBnB,EAAAC,EAAAC,cAAA,SACAC,UAAU,SACViB,KAAK,SACLC,SAAUF,EACVD,YAAaA,MCsCFI,cAtCf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBFI,kBAAmB,SAACC,GAClB,IAAIC,EAAQD,EAAEE,OAAOC,MACrBX,EAAKY,SAAS,CAACC,YAAYJ,KAjB3BT,EAAKc,MAAQ,CACXzB,SAAU,GACVwB,YAAa,IAJJb,mFAQM,IAAAe,EAAAZ,KACjBa,MAAM,8CAA8CC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OAC7EF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZL,EAAKH,SAAS,CAACvB,SAAW+B,yCAUpB,IAAAG,EAC2BpB,KAAKW,MAA9BzB,EADFkC,EACElC,SAAUwB,EADZU,EACYV,YACZW,EAAmBnC,EAASoC,OAAO,SAAAzC,GAAO,OAC9CA,EAAQE,KAAKwC,cAAcC,SAASd,EAAYa,iBAElD,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACiD,EAAD,CAAYjC,YAAY,kBAAkBC,aAAcO,KAAKI,oBAC7D9B,EAAAC,EAAAC,cAACkD,EAAD,CAAUxC,SAAUmC,YAjCVM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.51d8b95a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nimport './card.styles.css'\r\n\r\nexport const Card = props =>(\r\n<div className='card-container'>\r\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    \r\n    <h2>{props.monster.name}</h2>\r\n    <p> {props.monster.email}</p>\r\n</div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.styles.css'\r\n\r\nimport {Card} from '../card/card'\r\n\r\nexport const CardList = props => \r\n(\r\n<div className='card-list'>\r\n\r\n{props.monsters.map( monster => (\r\n    <Card key={monster.key}  monster={monster}/>\r\n))}\r\n</div>\r\n)\r\n","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox= ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search' \r\n    type='search' \r\n    onChange={handleChange} \r\n    placeholder={placeholder}\r\n    // value={searchField}\r\n    >\r\n    </input>\r\n)","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {CardList} from '../src/component/card-list/card-list-component'\nimport {SearchBox} from '../src/component/searchBox/searchBox-component'\n\nclass App extends Component {\n\nconstructor(){\n  super();\n  this.state = {\n    monsters: [],\n    searchField: \"\"\n  }\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()\n  .then(users =>{\n    console.log(users)\n    this.setState({monsters : users})\n  })\n  )\n}\n\nhandleSearchState =(e) =>{\n  let field = e.target.value\n  this.setState({searchField:field})\n}\n\n  render(){\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Aj's Monsters Monster</h1>\n        <SearchBox  placeholder=\"Search Monsters\" handleChange={this.handleSearchState}/>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}